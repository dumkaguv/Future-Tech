import BaseComponent from"../../utils/BaseComponent.js";import MatchMedia from"../../utils/MatchMedia.js";const rootSelector="[data-js-select]";class Select extends BaseComponent{selectors={root:rootSelector,originalControl:"[data-js-select-original-control]",button:"[data-js-select-button]",dropdown:"[data-js-select-dropdown]",option:"[data-js-select-option]"};stateClasses={isExpanded:"is-expanded",isSelected:"is-selected",isCurrent:"is-current",isOnTheLeftSide:"is-on-the-left-side",isOnTheRightSide:"is-on-the-right-side"};stateAttributes={ariaExpanded:"aria-expanded",ariaSelected:"aria-selected",ariaActiveDescendant:"aria-activedescendant"};initialState={isExpanded:!1,currentOptionIndex:null,selectedOptionElement:null};constructor(t){super(),this.rootElement=t,this.originalControlElement=this.rootElement.querySelector(this.selectors.originalControl),this.buttonElement=this.rootElement.querySelector(this.selectors.button),this.dropdownElement=this.rootElement.querySelector(this.selectors.dropdown),this.optionElements=this.dropdownElement.querySelectorAll(this.selectors.option),this.state=this.getProxyState({...this.initialState,currentOptionIndex:this.originalControlElement.selectedIndex,selectedOptionElement:this.optionElements[this.originalControlElement.selectedIndex]}),this.fixDropdownPosition(),this.updateTabIndexes(),this.bindEvents()}updateUI(){const{isExpanded:t,currentOptionIndex:e,selectedOptionElement:n}=this.state,s=n.textContent.trim();(()=>{this.originalControlElement.value=s})(),(()=>{this.buttonElement.textContent=s,this.buttonElement.classList.toggle(this.stateClasses.isExpanded,t),this.buttonElement.setAttribute(this.stateAttributes.ariaExpanded,t),this.buttonElement.setAttribute(this.stateAttributes.ariaActiveDescendant,this.optionElements[e].id)})(),(()=>{this.dropdownElement.classList.toggle(this.stateClasses.isExpanded,t)})(),(()=>{this.optionElements.forEach(((t,s)=>{const i=e===s,o=n===t;t.classList.toggle(this.stateClasses.isCurrent,i),t.classList.toggle(this.stateClasses.isSelected,o),t.setAttribute(this.stateAttributes.ariaSelected,o)}))})()}toggleExpandedState(){this.state.isExpanded=!this.state.isExpanded}expand(){this.state.isExpanded=!0}collapse(){this.state.isExpanded=!1}fixDropdownPosition(){const t=document.documentElement.clientWidth/2,{width:e,x:n}=this.buttonElement.getBoundingClientRect(),s=n+e/2<t;this.dropdownElement.classList.toggle(this.stateClasses.isOnTheLeftSide,s),this.dropdownElement.classList.toggle(this.stateClasses.isOnTheRightSide,!s)}updateTabIndexes(t=MatchMedia.mobile.matches){this.originalControlElement.tabIndex=t?0:-1,this.buttonElement.tabIndex=t?-1:0}get isNeedToExpand(){const t=document.activeElement===this.buttonElement;return!this.state.isExpanded&&t}selectCurrentOption(){this.state.selectedOptionElement=this.optionElements[this.state.currentOptionIndex]}onButtonClick=()=>{this.toggleExpandedState()};onClick=t=>{const{target:e}=t,n=e===this.buttonElement,s=e.closest(this.selectors.dropdown)!==this.dropdownElement;if(!n&&s)return void this.collapse();e.matches(this.selectors.option)&&(this.state.selectedOptionElement=e,this.state.currentOptionIndex=[...this.optionElements].findIndex((t=>t===e)),this.collapse())};onArrowUpKeyDown=()=>{this.isNeedToExpand?this.expand():this.state.currentOptionIndex>0&&this.state.currentOptionIndex--};onArrowDownKeyDown=()=>{this.isNeedToExpand?this.expand():this.state.currentOptionIndex<this.optionElements.length-1&&this.state.currentOptionIndex++};onSpaceKeyDown=()=>{this.isNeedToExpand?this.expand():(this.selectCurrentOption(),this.collapse())};onEnterKeyDown=()=>{this.isNeedToExpand?this.expand():(this.selectCurrentOption(),this.collapse())};onKeyDown=t=>{const{code:e}=t,n={ArrowUp:this.onArrowUpKeyDown,ArrowDown:this.onArrowDownKeyDown,Space:this.onSpaceKeyDown,Enter:this.onEnterKeyDown}[e];n&&(t.preventDefault(),n())};onMobileMatchMediaChange=t=>{this.updateTabIndexes(t.matches)};onOriginalControlChange=()=>{this.state.selectedOptionElement=this.optionElements[this.originalControlElement.selectedIndex]};bindEvents(){MatchMedia.mobile.addEventListener("change",this.onMobileMatchMediaChange),this.buttonElement.addEventListener("click",this.onButtonClick),document.addEventListener("click",this.onClick),this.rootElement.addEventListener("keydown",this.onKeyDown),this.originalControlElement.addEventListener("change",this.onOriginalControlChange)}}class SelectCollection{constructor(){this.init()}init(){document.querySelectorAll(rootSelector).forEach((t=>{new Select(t)}))}}export default SelectCollection;